"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),y=a,m=u["".concat(d,".").concat(y)]||u[y]||p[y]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,slug:"read-ops",description:"Funamots read ops",title:"Read Operations"},i="Read Operations",c={unversionedId:"operations/read",id:"operations/read",title:"Read Operations",description:"Funamots read ops",source:"@site/docs/operations/read.md",sourceDirName:"operations",slug:"/operations/read-ops",permalink:"/funamots/operations/read-ops",draft:!1,editUrl:"https://github.com/mtranter/funamots/tree/main/docs/docs/operations/read.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"read-ops",description:"Funamots read ops",title:"Read Operations"},sidebar:"tutorialSidebar",previous:{title:"Operations",permalink:"/funamots/category/operations"},next:{title:"Write Operations",permalink:"/funamots/operations/write-ops"}},d={},s=[{value:"Get",id:"get",level:2},{value:"Hash and Partition key",id:"hash-and-partition-key",level:3},{value:"Hash key only",id:"hash-key-only",level:3},{value:"Query",id:"query",level:2},{value:"Simple query by hash key",id:"simple-query-by-hash-key",level:3},{value:"Paging",id:"paging",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Sort key conditions",id:"sort-key-conditions",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Scanning.",id:"scanning",level:3},{value:"Indexes",id:"indexes",level:3}],l={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"read-operations"},"Read Operations"),(0,a.kt)("h2",{id:"get"},"Get"),(0,a.kt)("h3",{id:"hash-and-partition-key"},"Hash and Partition key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nimport { tableBuilder } from 'funamots';\n\ntype Order {\n    accountId: string\n    orderId: string\n    orderTotal: number\n    orderDate: number\n}\n\nlet table = tableBuilder<Order>('Orders')\n                .withKey('accountId', 'orderId')\n                .build();\n\n\nlet order: Order | undefined = await table.get({\n    accountId: '123',\n    orderId: '456'\n  })\n")),(0,a.kt)("h3",{id:"hash-key-only"},"Hash key only"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nimport { tableBuilder } from 'funamots';\n\ntype Order {\n    orderId: string\n    orderTotal: number\n    orderDate: number\n}\n\nlet table = tableBuilder<Order>('Orders')\n                .withKey('orderId')\n                .build();\n\n\nlet order: Order | undefined = await table.get({\n    orderId: '456'\n  })\n")),(0,a.kt)("h2",{id:"query"},"Query"),(0,a.kt)("p",null,"In DynamoDB, querying is only supported for tables that have both a Hash/Partition and Range/Sort key defined"),(0,a.kt)("p",null,"For the below examples, we will assume the following code is already in scope:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nimport { tableBuilder } from 'funamots';\n\ntype Order {\n    accountId: string\n    orderId: string\n    orderTotal: number\n    orderDate: number\n}\n\nlet table = tableBuilder<Order>('Orders')\n                .withKey('accountId', 'orderId')\n                .build();\n\n")),(0,a.kt)("h3",{id:"simple-query-by-hash-key"},"Simple query by hash key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"let accountId = 'account-111222';\nlet { records: accounts } = await table.query(accountId);\n")),(0,a.kt)("h3",{id:"paging"},"Paging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"let accountId = 'account-111222';\n\n// Fetches the first 10 records, ordered by the range/sort key\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  pageSize: 10,\n});\n\n// Fetches the next 10 records\nlet { records: nextPageOfAccounts, nextStartKey } = await table.query(\n  accountId,\n  { pageSize: 10, startKey: nextStartKey }\n);\n")),(0,a.kt)("h3",{id:"sorting"},"Sorting"),(0,a.kt)("p",null,"DynamoDB offers basic sorting functionality: Sorting by the sort/range key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"let accountId = 'account-111222';\n\n// Sort ascending\nlet { records: accounts, nextStartKey } = await table.query(accountId);\n\n// Sort descending\nlet { records: accountsReverse, nextStartKey } = await table.query(accountId, {\n  descending: true,\n});\n")),(0,a.kt)("h3",{id:"sort-key-conditions"},"Sort key conditions"),(0,a.kt)("p",null,"DynamoDB offers the ability to add a filtering condition based on the sort key of the table.\nFunamots adds some letructs to allow this in a typesafe way"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { beginsWith, between } from 'funamots';\n\nlet accountId = 'account-111222';\n\n// Account id = 'account-111222' and order Id = 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: { '=': 'order-1' },\n});\n\n// Account id = 'account-111222' and order Id > 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: { '>': 'order-1' },\n});\n\n// Account id = 'account-111222' and order Id >= 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: { '>=': 'order-1' },\n});\n\n// Account id = 'account-111222' and order Id < 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: { '<': 'order-1' },\n});\n\n// Account id = 'account-111222' and order Id <= 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: { '<=': 'order-1' },\n});\n\n// Account id = 'account-111222' and order Id begins with 'order-1'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: beginsWith('order-1'),\n});\n\n// Account id = 'account-111222' and order Id is between 'order-1' and 'order-2'\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  sortKeyExpression: between('order-1', 'order-2'),\n});\n")),(0,a.kt)("h3",{id:"filtering"},"Filtering"),(0,a.kt)("p",null,"Filtering has a similar syntax to sort key expression, however filtering is allowed on any attribute\nFunamots offers boolean (AND/OR/NOT) combinators to allow complex filtering logic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { beginsWith, between, OR, NOT } from 'funamots';\n\nlet accountId = 'account-111222';\n\n// Account id = 'account-111222' and order total > 100\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  filterExpression: { orderTotal: { '>': 100 } },\n});\n\n// Account id = 'account-111222' and order total < 100 AND somehow the order occured in the future\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  filterExpression: {\n    orderTotal: { '<': 100 },\n    orderDate: { '>=': Date.now() },\n  },\n});\n\n// Account id = 'account-111222' and order total < 100 OR somehow the order occured in the future\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  filterExpression: OR({\n    orderTotal: { '<': 100 },\n    orderDate: { '>=': Date.now() },\n  }),\n});\n\n// Account id = 'account-111222' and order total < 100 AND the order did NOT occur in the future\nlet { records: accounts, nextStartKey } = await table.query(accountId, {\n  filterExpression: {\n    orderTotal: { '<': 100 },\n    orderDate: NOT({ '>=': Date.now() }),\n  },\n});\n")),(0,a.kt)("h3",{id:"scanning"},"Scanning."),(0,a.kt)("p",null,"While not good practise, sometimes scanning is appropriate"),(0,a.kt)("p",null,"Filtering/sorting/paging is also available as options passed to the sort function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const { records, nextStartKey } = await table.scan();\n")),(0,a.kt)("h3",{id:"indexes"},"Indexes"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"./../table-definition/table-builder#indexes"},"Indexes section in the Table Builder docs")))}p.isMDXComponent=!0}}]);